// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Tenant {
  id          String       @id
  name        String?
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  smtpConfigs SmtpConfig[]
  ApiKeys     ApiKey[]
  Emails      Emails[]

  @@map(name: "tenants")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          UserRole  @default(ADMIN)

  isActive  Boolean @default(true)
  tenant_id String  @default(cuid())

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Freesend

//(status    String) to be implemented
model SmtpConfig {
  id        String   @id @default(nanoid(10))
  tenant_id String
  name      String   @unique
  host      String
  port      Int
  security  String
  user      String
  pass      String
  tenant    Tenant   @relation(fields: [tenant_id], references: [id])
  apiKeys   ApiKey[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([tenant_id], name: "smtpconfig_tenant_id_idx")
  @@map(name: "smtp_configs")
}

model ApiKey {
  id           String     @id @default(nanoid(10))
  tenant_id    String
  smtpConfigId String?
  name         String
  token        String     @unique
  status       String     @default("active")
  tenant       Tenant     @relation(fields: [tenant_id], references: [id])
  smtpConfig   SmtpConfig? @relation(fields: [smtpConfigId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  Emails    Emails[]

  @@map(name: "api_keys")
}

model Emails {
  id        String   @id @default(nanoid(10))
  tenant_id String
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])
  from      String
  to        String
  subject   String
  text_body String?
  html_body String?
  tenant    Tenant   @relation(fields: [tenant_id], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  apiKeyId  String

  @@map(name: "emails")
}
